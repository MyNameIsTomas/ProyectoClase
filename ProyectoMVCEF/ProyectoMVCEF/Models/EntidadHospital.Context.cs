//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ProyectoMVCEF.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class EntidadHospital : DbContext
    {
        public EntidadHospital()
            : base("name=EntidadHospital")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<EMP> EMP { get; set; }
        public virtual DbSet<DEPT> DEPT { get; set; }
        public virtual DbSet<ENFERMO> ENFERMO { get; set; }
        public virtual DbSet<DOCTOR> DOCTOR { get; set; }
        public virtual DbSet<informacionTrabajadores> informacionTrabajadores { get; set; }
        public virtual DbSet<PLANTILLA> PLANTILLA { get; set; }
        public virtual DbSet<HOSPITAL> HOSPITAL { get; set; }
    
        public virtual int eliminarenfermo(Nullable<int> inscripcion)
        {
            var inscripcionParameter = inscripcion.HasValue ?
                new ObjectParameter("inscripcion", inscripcion) :
                new ObjectParameter("inscripcion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("eliminarenfermo", inscripcionParameter);
        }
    
        public virtual ObjectResult<ENFERMO> mostrarenfermos()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ENFERMO>("mostrarenfermos");
        }
    
        public virtual ObjectResult<ENFERMO> mostrarenfermos(MergeOption mergeOption)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ENFERMO>("mostrarenfermos", mergeOption);
        }
    
        public virtual ObjectResult<informacionempleado_Result> informacionempleado(Nullable<int> posicion)
        {
            var posicionParameter = posicion.HasValue ?
                new ObjectParameter("posicion", posicion) :
                new ObjectParameter("posicion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<informacionempleado_Result>("informacionempleado", posicionParameter);
        }
    
        public virtual ObjectResult<informaciondoctor_Result> informaciondoctor(Nullable<int> posicion)
        {
            var posicionParameter = posicion.HasValue ?
                new ObjectParameter("posicion", posicion) :
                new ObjectParameter("posicion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<informaciondoctor_Result>("informaciondoctor", posicionParameter);
        }
    
        public virtual int datosdepartamento(Nullable<int> deptno, ObjectParameter personas, ObjectParameter suma, ObjectParameter media)
        {
            var deptnoParameter = deptno.HasValue ?
                new ObjectParameter("deptno", deptno) :
                new ObjectParameter("deptno", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("datosdepartamento", deptnoParameter, personas, suma, media);
        }
    
        public virtual ObjectResult<paginarEmpleadosGrupo_Result> paginarEmpleadosGrupo(Nullable<int> posicion, ObjectParameter totalregistro)
        {
            var posicionParameter = posicion.HasValue ?
                new ObjectParameter("posicion", posicion) :
                new ObjectParameter("posicion", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<paginarEmpleadosGrupo_Result>("paginarEmpleadosGrupo", posicionParameter, totalregistro);
        }
    
        public virtual ObjectResult<paginarTrabajadores_Result> paginarTrabajadores(Nullable<int> posicion, Nullable<int> salario, ObjectParameter totalregistro)
        {
            var posicionParameter = posicion.HasValue ?
                new ObjectParameter("posicion", posicion) :
                new ObjectParameter("posicion", typeof(int));
    
            var salarioParameter = salario.HasValue ?
                new ObjectParameter("salario", salario) :
                new ObjectParameter("salario", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<paginarTrabajadores_Result>("paginarTrabajadores", posicionParameter, salarioParameter, totalregistro);
        }
    }
}
